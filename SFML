#include <SFML/Graphics.hpp>
#include <vector>

// 창 크기
const int windowWidth = 800;
const int windowHeight = 600;

// 공 클래스
class Ball {
public:
    sf::CircleShape shape;
    sf::Vector2f velocity;
    int bottomHits = 0; // 아래쪽 창에 닿은 횟수

    Ball(float radius, float x, float y) {
        shape.setRadius(radius);
        shape.setPosition(x, y);
        shape.setFillColor(sf::Color::Red);
        velocity = { -8.f, -8.f };
    }

    void update() {
        shape.move(velocity);

        if (left() < 0) velocity.x = 8.f;
        else if (right() > windowWidth) velocity.x = -8.f;

        if (top() < 0) velocity.y = 8.f;
        else if (bottom() > windowHeight) {
            // 공이 바닥에 닿았을 때의 처리를 리스폰으로 변경
            shape.setPosition(windowWidth / 2, windowHeight / 2); // 공을 화면 중앙으로 이동
            velocity.y = -8.f; // 방향을 위로 변경
            bottomHits++; // 아래쪽 창에 닿은 횟수 증가
        }
    }

    float x() const { return shape.getPosition().x; }
    float y() const { return shape.getPosition().y; }
    float left() const { return x() - shape.getRadius(); }
    float right() const { return x() + shape.getRadius(); }
    float top() const { return y() - shape.getRadius(); }
    float bottom() const { return y() + shape.getRadius(); }
};

// 패들 클래스
class Paddle {
public:
    sf::RectangleShape shape;
    sf::Vector2f velocity;
    const float paddleWidth = 100.f;
    const float paddleHeight = 20.f;
    const float paddleVelocity = 10.f;

    Paddle(float x, float y) {
        shape.setSize({ paddleWidth, paddleHeight });
        shape.setPosition(x, y);
        shape.setFillColor(sf::Color::Green);
        shape.setOrigin(paddleWidth / 2.f, paddleHeight / 2.f);
    }

    void update() {
        shape.move(velocity);

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Left) && left() > 0) velocity.x = -paddleVelocity;
        else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Right) && right() < windowWidth) velocity.x = paddleVelocity;
        else velocity.x = 0;
    }

    float x() const { return shape.getPosition().x; }
    float y() const { return shape.getPosition().y; }
    float left() const { return x() - shape.getSize().x / 2.f; }
    float right() const { return x() + shape.getSize().x / 2.f; }
    float top() const { return y() - shape.getSize().y / 2.f; }
    float bottom() const { return y() + shape.getSize().y / 2.f; }
};

// 블록 클래스
class Brick {
public:
    sf::RectangleShape shape;
    bool destroyed = false;

    Brick(float x, float y) {
        shape.setSize({ 60.f, 20.f });
        shape.setPosition(x, y);
        shape.setFillColor(sf::Color::Yellow);
        shape.setOrigin(30.f, 10.f);
    }

    float x() const { return shape.getPosition().x; }
    float y() const { return shape.getPosition().y; }
    float left() const { return x() - shape.getSize().x / 2.f; }
    float right() const { return x() + shape.getSize().x / 2.f; }
    float top() const { return y() - shape.getSize().y / 2.f; }
    float bottom() const { return y() + shape.getSize().y / 2.f; }
};

// 충돌 감지
template <class T1, class T2>
bool isIntersecting(T1& a, T2& b) {
    return a.right() >= b.left() && a.left() <= b.right() &&
        a.bottom() >= b.top() && a.top() <= b.bottom();
}

void testCollision(Paddle& paddle, Ball& ball) {
    if (!isIntersecting(paddle, ball)) return;

    ball.velocity.y = -ball.velocity.y;

    if (ball.x() < paddle.x()) ball.velocity.x = -8.f;
    else ball.velocity.x = 8.f;
}

void testCollision(Brick& brick, Ball& ball) {
    if (!isIntersecting(brick, ball)) return;

    brick.destroyed = true;

    float overlapLeft{ ball.right() - brick.left() };
    float overlapRight{ brick.right() - ball.left() };
    float overlapTop{ ball.bottom() - brick.top() };
    float overlapBottom{ brick.bottom() - ball.top() };

    bool ballFromLeft(abs(overlapLeft) < abs(overlapRight));
    bool ballFromTop(abs(overlapTop) < abs(overlapBottom));

    float minOverlapX{ ballFromLeft ? overlapLeft : overlapRight };
    float minOverlapY{ ballFromTop ? overlapTop : overlapBottom };

    if (abs(minOverlapX) < abs(minOverlapY)) ball.velocity.x = ballFromLeft ? -8.f : 8.f;
    else ball.velocity.y = ballFromTop ? -8.f : 8.f;
}

// 충돌 감지 및 처리 함수와 Paddle, Brick 클래스는 기존 코드를 사용합니다.

int main() {
    sf::RenderWindow window{ {windowWidth, windowHeight}, "Breakout Game" };
    window.setFramerateLimit(60);

    Ball ball{ 10.f, windowWidth / 2, windowHeight / 2 };
    Paddle paddle{ windowWidth / 2, windowHeight - 50 };

    std::vector<Brick> bricks;
    for (int iX{ 0 }; iX < 11; ++iX)
        for (int iY{ 0 }; iY < 4; ++iY)
            bricks.emplace_back((iX + 1) * (60 + 3) + 22, (iY + 2) * (20 + 3));

    while (window.isOpen()) {
        window.clear(sf::Color::Black);

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Escape) || ball.bottomHits >= 5) {
            window.close(); // 키보드의 Escape를 누르거나 공이 아래쪽 창에 5번 닿으면 게임 종료
        }

        ball.update();
        paddle.update();

        testCollision(paddle, ball);

        for (auto& brick : bricks) testCollision(brick, ball);

        bricks.erase(remove_if(begin(bricks), end(bricks), [](const Brick& mBrick) { return mBrick.destroyed; }), end(bricks));

        window.draw(ball.shape);
        window.draw(paddle.shape);
        for (auto& brick : bricks) window.draw(brick.shape);

        window.display();
    }

    return 0;
}
